{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae1547b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastapi import FastAPI, HTTPException\n",
    "from pydantic import BaseModel\n",
    "import requests\n",
    "import re\n",
    "\n",
    "app = FastAPI()\n",
    "\n",
    "# Define request body format\n",
    "class PostURL(BaseModel):\n",
    "    url: str\n",
    "\n",
    "# Detect platform based on URL\n",
    "def detect_platform(url: str):\n",
    "    if \"youtube.com\" in url or \"youtu.be\" in url:\n",
    "        return \"YouTube\"\n",
    "    elif \"instagram.com\" in url:\n",
    "        return \"Instagram\"\n",
    "    elif \"tiktok.com\" in url:\n",
    "        return \"TikTok\"\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "# Extract video ID from YouTube URL\n",
    "def extract_youtube_video_id(url):\n",
    "    pattern = r\"(?:youtube\\.com/watch\\?v=|youtu\\.be/)([\\w-]+)\"\n",
    "    match = re.search(pattern, url)\n",
    "    return match.group(1) if match else None\n",
    "\n",
    "@app.post(\"/extract-comments\")\n",
    "def extract_comments(data: PostURL):\n",
    "    url = data.url\n",
    "    platform = detect_platform(url)\n",
    "\n",
    "    if not platform:\n",
    "        raise HTTPException(status_code=400, detail=\"Unsupported platform\")\n",
    "\n",
    "    if platform == \"YouTube\":\n",
    "        video_id = extract_youtube_video_id(url)\n",
    "        if not video_id:\n",
    "            raise HTTPException(status_code=400, detail=\"Invalid YouTube URL\")\n",
    "        \n",
    "        # Replace 'YOUR_YOUTUBE_API_KEY' with a real API key from Google Cloud\n",
    "        api_key = \"AIzaSyAcQP3PdKpIoSf8fnQ9Y9eJD-RAxR_XV0s",
    "        youtube_api_url = f\"https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&videoId={video_id}&key={api_key}\"\n",
    "        \n",
    "        response = requests.get(youtube_api_url)\n",
    "        if response.status_code != 200:\n",
    "            raise HTTPException(status_code=500, detail=\"Error fetching YouTube comments\")\n",
    "\n",
    "        comments = [\n",
    "            {\"username\": item[\"snippet\"][\"topLevelComment\"][\"snippet\"][\"authorDisplayName\"],\n",
    "             \"text\": item[\"snippet\"][\"topLevelComment\"][\"snippet\"][\"textDisplay\"],\n",
    "             \"timestamp\": item[\"snippet\"][\"topLevelComment\"][\"snippet\"][\"publishedAt\"]}\n",
    "            for item in response.json().get(\"items\", [])\n",
    "        ]\n",
    "        return {\"platform\": \"YouTube\", \"comments\": comments}\n",
    "\n",
    "    elif platform == \"Instagram\" or platform == \"TikTok\":\n",
    "        raise HTTPException(status_code=501, detail=\"Instagram & TikTok API requires authentication\")\n",
    "\n",
    "    return {\"platform\": platform, \"comments\": []}\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
